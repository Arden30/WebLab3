<?xml version="1.0" encoding="UTF-8"?>
<project name="WebLab3" default="build" basedir=".">
    <property name="src" value="./src"/>
    <property name="compile" value="./compile"/>
    <property name="build" value="./build"/>
    <property name="main-class" value="models.DataBean"/>
    <property name="test" value="src/test/java"/>

    <path id="classpath">
        <fileset dir="${user.home}/.m2/repository/" includes="**/*.jar"/>
    </path>

    <target name="compile" description="Project compiling">
        <echo>Compilation process is running</echo>
        <mkdir dir="compile"/>
        <javac includeantruntime="true" srcdir="${src}" destdir="${compile}">
            <classpath refid="classpath"/>
        </javac>
        <echo>Successfully compiled!</echo>
    </target>

    <target name="build" description="Project building as jar-file" depends="compile">
        <echo>Building jar process is running</echo>
        <mkdir dir="build"/>
        <jar basedir="${compile}" destfile="${build}/${ant.project.name}.jar">
            <manifest>
                <attribute name="Created-By" value="arden"/>
                <attribute name="Manifest-Version" value="1.0"/>
                <attribute name="Main-Class" value="${main-class}"/>
            </manifest>
        </jar>
        <echo>Successfully built!</echo>
    </target>

    <target name="clean" description="Deleting compiled project classes and all temporary files">
        <echo>Cleaning is running</echo>
        <delete dir="${compile}"/>
        <delete dir="${build}"/>
        <echo>Cleaning completed successfully!</echo>
    </target>

    <target name="test" depends="build" description="jUnit-tests running">
        <echo>Testing is running</echo>
        <junit printsummary="true" haltonfailure="yes">
            <classpath>
                <path refid="classpath"/>
                <pathelement location="${compile}"/>
            </classpath>
            <test name="AreaCheckerTest"/>
            <formatter type="plain" usefile="false"/>
        </junit>
        <echo>Tests were successfully completed!</echo>
    </target>

    <target name="xml-validation" description="Validation of all xml files in the project">
        <echo>XML project files validation is running</echo>
        <xmlvalidate lenient="true">
            <fileset dir="./" includes="**/*.xml" />
        </xmlvalidate>
        <echo>XML files validation completed successfully!</echo>
    </target>

    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath refid="classpath"/>
    </taskdef>

    <target name="history" description="loads previous version from git repository if compilation fails">
        <trycatch>
            <try>
                <antcall target="compile"/>
            </try>
            <catch>
                <load-previous-revision/>
                <exec executable="git" outputproperty="current_commit">
                    <arg value="rev-parse"/>
                    <arg value="HEAD"/>
                </exec>
            </catch>
        </trycatch>
    </target>

    <macrodef name="load-previous-revision">
        <sequential>
            <exec executable="git" outputproperty="next_commit">
                <arg value="rev-parse"/>
                <arg value="HEAD"/>
            </exec>
            <exec executable="git" outputproperty="reverse_commits">
                <arg value="log"/>
                <arg value="--pretty=oneline"/>
                <arg value="--reverse"/>
            </exec>
            <property name="first_commit"/>
            <propertyregex property="first_commit" input="${reverse_commits}" regexp="(\w+)" select="\1"/>
            <if>
                <not>
                    <equals arg1="${first_commit}" arg2="${next_commit}"/>
                </not>
                <then>
                    <exec executable="git">
                        <arg value="checkout"/>
                        <arg value="-f"/>
                        <arg value="HEAD^"/>
                    </exec>
                    <trycatch>
                        <try>
                            <antcall target="compile"/>
                            <exec executable="git">
                                <arg value="diff"/>
                                <arg value="${next_commit}"/>
                                <redirector output="history_diff.txt"/>
                            </exec>
                            <exec executable="git">
                                <arg value="checkout"/>
                                <arg value="main"/>
                            </exec>
                        </try>
                        <catch>
                            <load-previous-revision/>
                        </catch>
                    </trycatch>
                </then>
            </if>
        </sequential>
    </macrodef>
</project>